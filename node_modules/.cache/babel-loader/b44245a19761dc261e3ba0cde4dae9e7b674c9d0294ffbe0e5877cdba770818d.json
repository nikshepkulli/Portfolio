{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\niksh\\\\OneDrive\\\\Desktop\\\\portfolio\\\\src\\\\components\\\\PDFViewerComponent.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Document, Page } from \"react-pdf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pdfUrl1 = \"src/rewards&recognition.pdf\";\nconst pdfUrl2 = \"src/rewards&recognition2.pdf\";\n/**\r\n * The PDFViewerComponent functional component\r\n *\r\n * This component is responsible for rendering a PDF viewer\r\n * and handling the loading state of the PDF document\r\n *\r\n * @param {string} pdfUrl - The URL of the PDF document to be rendered\r\n */\nconst PDFViewerComponent = ({\n  pdfUrl\n}) => {\n  _s();\n  /**\r\n   * A state variable to track the loading state of the PDF document\r\n   *\r\n   * Initially set to true, indicating that the PDF is loading\r\n   */\n  const [isLoading, setIsLoading] = useState(true);\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n\n  /**\r\n   * The onLoadSuccess event handler is called when the PDF document is loaded successfully\r\n   *\r\n   * Sets the isLoading state to false, indicating that the PDF is loaded\r\n   * and updates the numPages state with the total number of pages in the PDF\r\n   */\n  const onLoadSuccess = ({\n    numPages\n  }) => {\n    setIsLoading(false);\n    setNumPages(numPages);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Document, {\n      file: pdfUrl,\n      onLoadSuccess: onLoadSuccess,\n      children: /*#__PURE__*/_jsxDEV(Page, {\n        pageNumber: pageNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), \"/** * Conditional rendering of page navigation buttons * * If numPages is greater than 1, render the buttons */\", numPages > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPageNumber(pageNumber - 1),\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPageNumber(pageNumber + 1),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(PDFViewerComponent, \"E/SCLTkyLDCQ7+2B/MGstWvzv7Y=\");\n_c = PDFViewerComponent;\nexport default PDFViewerComponent;\nvar _c;\n$RefreshReg$(_c, \"PDFViewerComponent\");","map":{"version":3,"names":["useState","Document","Page","jsxDEV","_jsxDEV","pdfUrl1","pdfUrl2","PDFViewerComponent","pdfUrl","_s","isLoading","setIsLoading","numPages","setNumPages","pageNumber","setPageNumber","onLoadSuccess","children","fileName","_jsxFileName","lineNumber","columnNumber","file","onClick","_c","$RefreshReg$"],"sources":["C:/Users/niksh/OneDrive/Desktop/portfolio/src/components/PDFViewerComponent.js"],"sourcesContent":["import {useState} from \"react\";\r\nimport {Document, Page} from \"react-pdf\";\r\nconst pdfUrl1 = \"src/rewards&recognition.pdf\";\r\nconst pdfUrl2 = \"src/rewards&recognition2.pdf\";\r\n/**\r\n * The PDFViewerComponent functional component\r\n *\r\n * This component is responsible for rendering a PDF viewer\r\n * and handling the loading state of the PDF document\r\n *\r\n * @param {string} pdfUrl - The URL of the PDF document to be rendered\r\n */\r\nconst PDFViewerComponent = ({pdfUrl}) => {\r\n  /**\r\n   * A state variable to track the loading state of the PDF document\r\n   *\r\n   * Initially set to true, indicating that the PDF is loading\r\n   */\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [numPages, setNumPages] = useState(null);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n\r\n  /**\r\n   * The onLoadSuccess event handler is called when the PDF document is loaded successfully\r\n   *\r\n   * Sets the isLoading state to false, indicating that the PDF is loaded\r\n   * and updates the numPages state with the total number of pages in the PDF\r\n   */\r\n  const onLoadSuccess = ({numPages}) => {\r\n    setIsLoading(false);\r\n    setNumPages(numPages);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoading && <div>Loading...</div>}\r\n      <Document file={pdfUrl} onLoadSuccess={onLoadSuccess}>\r\n        <Page pageNumber={pageNumber} />\r\n      </Document>\r\n      /** * Conditional rendering of page navigation buttons * * If numPages is\r\n      greater than 1, render the buttons */\r\n      {numPages > 1 && (\r\n        <div>\r\n          <button onClick={() => setPageNumber(pageNumber - 1)}>\r\n            Previous\r\n          </button>\r\n          <button onClick={() => setPageNumber(pageNumber + 1)}>Next</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PDFViewerComponent;\r\n"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B,SAAQC,QAAQ,EAAEC,IAAI,QAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACzC,MAAMC,OAAO,GAAG,6BAA6B;AAC7C,MAAMC,OAAO,GAAG,8BAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAGA,CAAC;EAACC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACvC;AACF;AACA;AACA;AACA;EACE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;;EAE/C;AACF;AACA;AACA;AACA;AACA;EACE,MAAMgB,aAAa,GAAGA,CAAC;IAACJ;EAAQ,CAAC,KAAK;IACpCD,YAAY,CAAC,KAAK,CAAC;IACnBE,WAAW,CAACD,QAAQ,CAAC;EACvB,CAAC;EAED,oBACER,OAAA;IAAAa,QAAA,GACGP,SAAS,iBAAIN,OAAA;MAAAa,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnCjB,OAAA,CAACH,QAAQ;MAACqB,IAAI,EAAEd,MAAO;MAACQ,aAAa,EAAEA,aAAc;MAAAC,QAAA,eACnDb,OAAA,CAACF,IAAI;QAACY,UAAU,EAAEA;MAAW;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,mHAGX,EAACT,QAAQ,GAAG,CAAC,iBACXR,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAQmB,OAAO,EAAEA,CAAA,KAAMR,aAAa,CAACD,UAAU,GAAG,CAAC,CAAE;QAAAG,QAAA,EAAC;MAEtD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTjB,OAAA;QAAQmB,OAAO,EAAEA,CAAA,KAAMR,aAAa,CAACD,UAAU,GAAG,CAAC,CAAE;QAAAG,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACZ,EAAA,CAvCIF,kBAAkB;AAAAiB,EAAA,GAAlBjB,kBAAkB;AAyCxB,eAAeA,kBAAkB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}